#include <stdio.h>
#include <math.h>
#include <GL/glut.h>

GLint xStart, yStart, xEnd, yEnd;
void init();
void LineBres_L1(GLint, GLint, GLint, GLint, GLfloat);
void LineBres_GE1(GLint, GLint, GLint, GLint, GLfloat);
void setPixel(GLint, GLint);
void display();
void main(int argc, char **argv)
{
	printf("enter two points for draw lineBresenham:\n");
	printf("\n enter point1(xStart,yStart):");
	scanf_s("%d%d", &xStart, &yStart);
	printf("\n enter point2(xEnd,yEnd):");
	scanf_s("%d%d", &xEnd, &yEnd);
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(300, 400);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("LineBresenham");
	init();
	glutDisplayFunc(display);
	glutMainLoop();
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	GLfloat m;
	m = (float)(yEnd - yStart) / (xEnd - xStart);
	if (fabs(m) >= 1)
		LineBres_GE1(xStart, yStart, xEnd, yEnd, m);
	else
		LineBres_L1(xStart, yStart, xEnd, yEnd, m);
}

void LineBres_L1(GLint x0, GLint y0, GLint x1, GLint y1, GLfloat m)
{
	GLint dx = abs(x1 - x0);
	GLint dy = abs(y1 - y0);
	GLint p = 2 *dy - dx;
	GLint twoDy = 2 * dy;
	GLint twoDyMinusDx = 2 *(dy - dx);
	GLint x = x0, y = y0;
	if (x0 > x1)
	{
		x = x1;
		y = y1;
		x1 = x0;
	}
	else
	{
		x = x0;
		y = y0;
	}

	setPixel(x, y);
	while (x < x1)
	{
		if (p < 0)
		{
			p += twoDy;
			x++;
		}
		else
		{
			p += twoDyMinusDx;
			x++;
			if (m < 0)
				y--;
			else
				y++;
		}

		setPixel(x, y);
	}
}

void LineBres_GE1(GLint x0, GLint y0, GLint x1, GLint y1, GLfloat m)
{
	GLint dx = abs(x1 - x0);
	GLint dy = abs(y1 - y0);
	GLint p = 2 *dx - dy;
	GLint twoDx = 2 * dx;
	GLint twoDxMinusDy = 2 *(dx - dy);
	GLint x = x0, y = y0;
	if (y0 > y1)
	{
		x = x1;
		y = y1;
		y1 = y0;
	}
	else
	{
		x = x0;
		y = y0;
	}

	setPixel(x, y);
	while (y < y1)
	{
		if (p < 0)
		{
			p += twoDx;
			y++;
		}
		else
		{
			p += twoDxMinusDy;
			y++;
			if (m < 0)
				x--;
			else
				x++;
		}

		setPixel(x, y);
	}
}

void setPixel(GLint xCoordinate, GLint yCoordinate)
{
	glBegin(GL_POINTS);
	glVertex2i(xCoordinate, yCoordinate);
	glEnd();
	glFlush();
}

void init()
{
	glClearColor(1.0, 1.0, 1.0, 0);
	glColor3f(0.0, 0.0, 0.0);
	glPointSize(8.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-50, 50, -50, 50);
}